cmake_minimum_required(VERSION 3.5)
project(clocks)

#set(CMAKE_VERBOSE_MAKEFILE ON)
set(LIBRARY_OUTPUT_PATH "${PROJECT_SOURCE_DIR}/lib")
set(EXECUTABLE_OUTPUT_PATH "${PROJECT_SOURCE_DIR}/bin")
set_directory_properties(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES "${LIBRARY_OUTPUT_PATH}")
set_directory_properties(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES "${EXECUTABLE_OUTPUT_PATH}")
set_directory_properties(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES "${CMAKE_CURRENT_SOURCE_DIR}/docs/out")
add_subdirectory(src)

option(BUILD_TEST "Build the testing infrastrucutre" OFF)
if(BUILD_TEST)
    enable_testing()
    # add_subdirectory(test)
    # add_test(NAME chunk_unit COMMAND ${PROJECT_SOURCE_DIR}/test/bin/chunk_unit )
    # add_test(NAME compiler_unit COMMAND ${PROJECT_SOURCE_DIR}/test/bin/compiler_unit )
    # add_test(NAME debug_unit COMMAND ${PROJECT_SOURCE_DIR}/test/bin/debug_unit )
    # add_test(NAME memory_unit COMMAND ${PROJECT_SOURCE_DIR}/test/bin/memory_unit )
    # add_test(NAME scanner_unit COMMAND ${PROJECT_SOURCE_DIR}/test/bin/scanner_unit )
    # add_test(NAME value_unit COMMAND ${PROJECT_SOURCE_DIR}/test/bin/value_unit )
    # add_test(NAME vm_unit COMMAND ${PROJECT_SOURCE_DIR}/test/bin/vm_unit )
    add_test(NAME assignment_tests COMMAND ${PROJECT_SOURCE_DIR}/test/language/driver -v -d assignment)
    add_test(NAME call_tests COMMAND ${PROJECT_SOURCE_DIR}/test/language/driver -v -d call)
    add_test(NAME comments_tests COMMAND ${PROJECT_SOURCE_DIR}/test/language/driver -v -d comments)
    add_test(NAME field_tests COMMAND ${PROJECT_SOURCE_DIR}/test/language/driver -v -d assignment)
    add_test(NAME inheritance_tests COMMAND ${PROJECT_SOURCE_DIR}/test/language/driver -v -d field)
    add_test(NAME misc_tests COMMAND ${PROJECT_SOURCE_DIR}/test/language/driver -v -d misc)
    add_test(NAME print_tests COMMAND ${PROJECT_SOURCE_DIR}/test/language/driver -v -d print)
    add_test(NAME string_tests COMMAND ${PROJECT_SOURCE_DIR}/test/language/driver -v -d string)
    add_test(NAME while_tests COMMAND ${PROJECT_SOURCE_DIR}/test/language/driver -v -d while)
    add_test(NAME class_tests COMMAND ${PROJECT_SOURCE_DIR}/test/language/driver -v -d class)
    add_test(NAME constructor_tests COMMAND ${PROJECT_SOURCE_DIR}/test/language/driver -v -d constructor)
    add_test(NAME for_tests COMMAND ${PROJECT_SOURCE_DIR}/test/language/driver -v -d for)
    add_test(NAME limit_tests COMMAND ${PROJECT_SOURCE_DIR}/test/language/driver -v -d limit)
    add_test(NAME nil_tests COMMAND ${PROJECT_SOURCE_DIR}/test/language/driver -v -d nil)
    add_test(NAME regression_tests COMMAND ${PROJECT_SOURCE_DIR}/test/language/driver -v -d regression)
    add_test(NAME super_tests COMMAND ${PROJECT_SOURCE_DIR}/test/language/driver -v -d super)
    add_test(NAME block_tests COMMAND ${PROJECT_SOURCE_DIR}/test/language/driver -v -d block)
    add_test(NAME closure_tests COMMAND ${PROJECT_SOURCE_DIR}/test/language/driver -v -d closure)
    add_test(NAME function_tests COMMAND ${PROJECT_SOURCE_DIR}/test/language/driver -v -d function)
    add_test(NAME logical_operator_tests COMMAND ${PROJECT_SOURCE_DIR}/test/language/driver -v -d logical_operator)
    add_test(NAME number_tests COMMAND ${PROJECT_SOURCE_DIR}/test/language/driver -v -d number)
    add_test(NAME return_tests COMMAND ${PROJECT_SOURCE_DIR}/test/language/driver -v -d return)
    add_test(NAME this_tests COMMAND ${PROJECT_SOURCE_DIR}/test/language/driver -v -d this)
    add_test(NAME bool_tests COMMAND ${PROJECT_SOURCE_DIR}/test/language/driver -v -d bool)
    add_test(NAME expressions_tests COMMAND ${PROJECT_SOURCE_DIR}/test/language/driver -v -d expressions)
    add_test(NAME if_tests COMMAND ${PROJECT_SOURCE_DIR}/test/language/driver -v -d if)
    add_test(NAME method_tests COMMAND ${PROJECT_SOURCE_DIR}/test/language/driver -v -d method)
    add_test(NAME operator_tests COMMAND ${PROJECT_SOURCE_DIR}/test/language/driver -v -d operator)
    add_test(NAME variable_tests COMMAND ${PROJECT_SOURCE_DIR}/test/language/driver -v -d variable)
    add_test(NAME scanning_tests COMMAND ${PROJECT_SOURCE_DIR}/test/language/driver -v -d scanning)
    #add_test(NAME benchmark_tests COMMAND ${PROJECT_SOURCE_DIR}/test/language/driver -v -d benchmark)
endif()

#option(BUILD_DOCUMENTATION "Create and install the HTML based API documentation (requires Doxygen)" ${DOXYGEN_FOUND})
option(BUILD_DOCS "Create and install the HTML based API documentation (requires Doxygen)" OFF)
if(BUILD_DOCS)
    find_package(Doxygen)

    if(NOT DOXYGEN_FOUND)
         message(FATAL_ERROR "Doxygen is needed to build the documentation.")
    endif()

    set(doxyfile_in ${CMAKE_CURRENT_SOURCE_DIR}/docs/${PROJECT_NAME}.doxygen)
    set(doxyfile ${CMAKE_CURRENT_BINARY_DIR}/doxyfile)

    configure_file(${doxyfile_in} ${doxyfile} @ONLY)

    message("Doxygen build started.")

    add_custom_target(doc ALL
                      COMMAND ${DOXYGEN_EXECUTABLE} ${doxyfile_in}
                      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/docs
                      COMMENT "Generating API documentation with Doxygen"
                      VERBATIM)

    #    install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/html DESTINATION     share/doc)
endif()

file(MAKE_DIRECTORY bin)
#file(MAKE_DIRECTORY lib)

